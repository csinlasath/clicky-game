{"version":3,"sources":["components/gameBoard/GameBoard.js","components/cardDeck/CardDeck.js","components/gifcard/GifCard.js","components/masthead/Masthead.js","App.js","serviceWorker.js","index.js"],"names":["GameBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","react","className","id","children","Component","CardDeck","GifCard","handleClick","isMatched","setState","isClicked","showGif","gifImage","gifCoverImg","checkForMatch","gifId","_this2","concat","style","width","height","onClick","e","target","dataset","data-id","dataId","src","alt","gifTitle","Masthead","formStateChange","defineProperty","name","value","submitSearch","preventDefault","hasSearched","queryURL","gifSearchField","component","assertThisInitialized","resultsArr","tempArr","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","data","console","log","length","i","matchedArr","sort","b","Math","random","gifSearchResults","gameStart","open","send","disableSearch","clickNumber","firstClickId","secondClickId","foundMatch","shortenDataId","replace","resetGame","document","getElementById","innerHTML","window","location","assign","mastheadInitialState","gifOriginalArr","gifDuplicateArr","htmlFor","type","placeholder","onChange","gameBoard_GameBoard","cardDeck_CardDeck","map","gifCard","index","gifcard_GifCard","key","images","fixed_height","url","App","masthead_Masthead","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.86d5f6b4.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport './gameBoard.css';\n\nclass GameBoard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <div className='container' id='game-board'>\n                    {this.props.children}\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default GameBoard;","import React, { Component, Fragment } from 'react';\nimport './cardDeck.css';\n\nclass CardDeck extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {};\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <div className='container'>\n                    <div className='card-deck'>\n                        {this.props.children}\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default CardDeck;","import React, { Component, Fragment } from 'react';\nimport './gifcard.css';\n\nclass GifCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isClicked: false,\n            isMatched: this.props.isMatched,\n            checkForMatch: this.props.checkForMatch,\n            gifId: this.props.gifId,\n            gifImage: this.props.gifImage,\n            gifCoverImg: 'http://assets.materialup.com/uploads/5d38e79f-3463-4f72-8716-5c62b2d9847b/0x0ss-85.jpg',\n        };\n    }\n\n    componentDidMount() {\n    }\n\n    handleClick = () => {\n        if (this.state.isMatched === false) {\n            this.setState({\n                isClicked: true,\n            });\n        }\n    }\n\n    showGif = () => {\n        if (this.state.isClicked) {\n            return this.state.gifImage;\n        }\n        else {\n            return this.state.gifCoverImg;\n        }\n    }\n\n    isMatched = () => {\n        if (this.state.isMatched) {\n            return 'success';\n        }\n        else {\n            return 'dark';\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                    <div className={`card bg-${this.isMatched()} text-center text-white revealed-card bg-${this.isMatched()} border-${this.isMatched()}`} style={{ width: '300px', height: '125px' }} onClick={(e) => {this.state.checkForMatch(e.target.dataset.id); this.handleClick()}} data-id={this.props.dataId}>\n                        <img className='card-img' src={this.showGif()} alt={this.props.gifTitle} style={{ width: '100%', height: '90px' }} data-id={this.props.dataId}></img>\n                        <p className={`card-title bg-${this.isMatched()} text-muted`} data-id={this.props.dataId}>{this.props.gifTitle}</p>\n                    </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default GifCard;","import React, { Component, Fragment } from 'react';\nimport GameBoard from '../gameBoard';\nimport CardDeck from '../cardDeck';\nimport GifCard from '../gifcard';\nimport './masthead.css';\n\nclass Masthead extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            mastheadInitialState: props,\n            gifSearchField: '',\n            gifOriginalArr: [],\n            gifDuplicateArr: [],\n            gifSearchResults: [],\n            hasSearched: false,\n            gameStart: false,\n            clickNumber: 0,\n            firstClickId: '',\n            secondClickId: '',\n            foundMatch: false\n        }\n    }\n\n    componentDidMount() {\n        if (this.state.foundMatch) {\n\n        }\n    }\n\n    formStateChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    submitSearch = (e) => {\n        e.preventDefault();\n        if (!this.state.hasSearched) {\n            const APIKey = 'c1BJcDvA6sWBiMUAcncBxkaoqiYADfoL';\n            const queryURL = `https://api.giphy.com/v1/gifs/search?q=${this.state.gifSearchField}&limit=15&api_key=${APIKey}`;\n\n            let component = this;\n            let resultsArr = [];   \n            let tempArr = [];  \n            const xhttp = new XMLHttpRequest();\n            xhttp.onreadystatechange = function () {\n                if (this.readyState === 4 && this.status === 200) {\n\n                    resultsArr = JSON.parse(this.responseText);\n                    resultsArr = resultsArr.data;\n                    console.log(resultsArr);\n                    if (resultsArr.length === 15) {\n                        tempArr = JSON.parse(this.responseText);\n                        tempArr = tempArr.data;\n                        for (let i = 0; i < tempArr.length; i++) {\n                            tempArr[i].id += '-duplicate';\n                        }\n\n                        console.log(tempArr);\n                        console.log(resultsArr);\n                        let matchedArr = resultsArr.concat(tempArr);\n                        matchedArr.sort(function (a, b) {\n                            return 0.5 - Math.random()\n                        });\n    \n                        component.setState({\n                            gifSearchResults: matchedArr,\n                            gifSearchField: '',\n                            hasSearched: true,\n                            gameStart: true\n                        });\n                        console.log(component.state);\n                    }\n                    else {\n                        component.setState({\n                            gifSearchResults: resultsArr,\n                            gifSearchField: '',\n                            hasSearched: false,\n                            gameStart: false\n                        }); \n                    }\n                }\n            }\n            xhttp.open(\"GET\", queryURL, true);\n            xhttp.send();\n        }\n    }\n\n    disableSearch = () => {\n        if (this.state.gifSearchResults >= 30) {\n            if (this.state.hasSearched) {\n                return 'btn btn-outline-danger disabled';\n            }\n            else {\n                return 'btn btn-outline-danger disabled';\n            }\n        }\n        else {\n            return 'btn btn-outline-danger';\n        }\n    }\n\n    checkForMatch = (e) => {\n        if (this.state.clickNumber === 0) {\n            this.setState((state) => ({\n                firstClickId: e,\n                clickNumber: state.clickNumber + 1\n            }), () => console.log(this.state));\n        }\n        if (this.state.clickNumber === 1) {\n            this.setState((state) => ({\n                secondClickId: e,\n                clickNumber: 0\n            }), () => {\n                console.log(this.state);\n                if (this.state.firstClickId === this.state.secondClickId) {\n                    console.log('Found a match!');\n                    this.setState({\n                        foundMatch: true\n                    });\n                }\n            });\n        }\n        // if (this.state.clickNumber === 1) {\n        //     this.setState({\n        //         secondClickId: e,\n        //         clickNumber: 2\n        //     }, () => {\n        //         console.log(this.state)\n        //         if (this.state.firstClickId === this.state.secondClickId) {\n        //             console.log(\"Found a match!\");\n        //             this.setState({\n        //                 clickNumber: 0\n        //             });\n        //         }\n        //     });\n        // }\n    }\n\n    shortenDataId = (gifId) => {\n        const updatedId = gifId.replace('-duplicate', '');\n        return updatedId;\n    }\n\n    resetGame = () => {\n        document.getElementById('game-board').innerHTML = '';\n        window.location.assign('/');\n    }\n\n    render() {\n        if (this.state.gifSearchResults.length >= 30) {\n            return (\n                <Fragment>\n                    <div className='jumbotron jumbotron-fluid bg-dark'>\n                        <div className='container'>\n                            <form>\n                                <div className='form-group'>\n                                    <label htmlFor='gifSearch' className='text-light'>Search for Gif</label>\n                                    <div className='input-group mb-2 mr-sm-2'>\n                                        <input type='text' name='gifSearchField' className='form-control' id='gifSearch' placeholder='Search for a Gif' value={this.state.gifSearchField} onChange={this.formStateChange}></input>\n                                        <div className='input-group-append'>\n                                            <button type='submit' className={this.disableSearch()} id='submitGif' onClick={this.submitSearch}>Search</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                    <GameBoard>\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index <= 5) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={this.shortenDataId(gifCard.id)} isMatched={false} checkForMatch={(e) => this.checkForMatch(e)}/>\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-1-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index > 5 && index <= 11) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={this.shortenDataId(gifCard.id)} isMatched={false} checkForMatch={(e) => this.checkForMatch(e)} />\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-2-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index > 11 && index <= 17) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={this.shortenDataId(gifCard.id)} isMatched={false} checkForMatch={(e) => this.checkForMatch(e)} />\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-3-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index > 17 && index <= 23) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={this.shortenDataId(gifCard.id)} isMatched={false} checkForMatch={(e) => this.checkForMatch(e)} />\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-4-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index > 23 && index <= 29) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={this.shortenDataId(gifCard.id)} isMatched={false} checkForMatch={(e) => this.checkForMatch(e)} />\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-5-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <button type='submit' className='btn btn-danger' id='reset-game' onClick={(e) => this.resetGame(e)}>Reset Game</button>\n                    </GameBoard>\n                </Fragment>\n            )\n        }\n        else if ((this.state.gifSearchResults.length > 2) && (this.state.gifSearchResults.length < 30)) {\n            return (\n                <Fragment>\n                    <div className='jumbotron jumbotron-fluid bg-dark'>\n                        <div className='container'>\n                            <form>\n                                <div className='form-group'>\n                                    <label htmlFor='gifSearch' className='text-light'>Search for Gif</label>\n                                    <div className='input-group mb-2 mr-sm-2'>\n                                        <input type='text' name='gifSearchField' className='form-control' id='gifSearch' placeholder='Search for a Gif' value={this.state.gifSearchField} onChange={this.formStateChange}></input>\n                                        <div className='input-group-append'>\n                                            <button type='submit' className={this.disableSearch()} id='submitGif' onClick={this.submitSearch}>Search</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                    <GameBoard>\n                        <h2>Not Enough Gifs to fill the board.  Try Searching again!</h2>\n                    </GameBoard>\n                </Fragment>\n            )\n        }\n        else {\n            return (\n                <Fragment>\n                    <div className='jumbotron jumbotron-fluid bg-dark'>\n                        <div className='container'>\n                            <form>\n                                <div className='form-group'>\n                                    <label htmlFor='gifSearch' className='text-light'>Search for Gif</label>\n                                    <div className='input-group mb-2 mr-sm-2'>\n                                        <input type='text' name='gifSearchField' className='form-control' id='gifSearch' placeholder='Search for a Gif' value={this.state.gifSearchField} onChange={this.formStateChange}></input>\n                                        <div className='input-group-append'>\n                                            <button type='submit' className={this.disableSearch()} id='submitGif' onClick={this.submitSearch}>Search</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                    <GameBoard>\n                        <h2>Search for Gifs to Start</h2>\n                    </GameBoard>\n                </Fragment>\n            )\n        }\n\n    }\n}\n\nexport default Masthead;","import React, { Component, Fragment } from 'react';\n// import Navbar from './components/navbar';\nimport Masthead from './components/masthead';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        {/* <Navbar /> */}\n        <Masthead />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}