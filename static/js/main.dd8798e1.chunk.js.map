{"version":3,"sources":["components/gameBoard/GameBoard.js","components/cardDeck/CardDeck.js","components/gifcard/GifCard.js","components/masthead/Masthead.js","App.js","serviceWorker.js","index.js"],"names":["GameBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","react","className","id","children","Component","CardDeck","GifCard","showGif","isClicked","isMatched","gifImage","gifCoverImg","checkForMatch","gifId","_this2","concat","style","width","height","onClick","e","target","dataset","data-id","dataId","src","alt","gifTitle","Masthead","formStateChange","setState","defineProperty","name","value","submitSearch","preventDefault","hasSearched","queryURL","gifSearchField","component","assertThisInitialized","resultsArr","tempArr","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","JSON","parse","responseText","data","console","log","length","i","matchedArr","sort","b","Math","random","gifSearchResults","gameStart","window","location","assign","open","send","disableSearch","clickNumber","clickedArr","clickedGifsArr","push","firstClickId","indexOf","secondClickId","shortenDataId","matchedGifId","foundMatch","checkMatchedGifs","checkForClicked","replace","resetGame","document","getElementById","innerHTML","mastheadInitialState","gifOriginalArr","gifDuplicateArr","htmlFor","type","placeholder","onChange","gameBoard_GameBoard","cardDeck_CardDeck","map","gifCard","index","gifcard_GifCard","key","images","fixed_height","url","App","masthead_Masthead","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dd8798e1.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport './gameBoard.css';\n\nclass GameBoard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <div className='container' id='game-board'>\n                    {this.props.children}\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default GameBoard;","import React, { Component, Fragment } from 'react';\nimport './cardDeck.css';\n\nclass CardDeck extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {};\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <div className='container'>\n                    <div className='card-deck'>\n                        {this.props.children}\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default CardDeck;","import React, { Component, Fragment } from 'react';\nimport './gifcard.css';\n\nclass GifCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isClicked: false,\n            isMatched: this.props.isMatched,\n            checkForMatch: this.props.checkForMatch,\n            gifId: this.props.gifId,\n            gifImage: this.props.gifImage,\n            gifCoverImg: 'http://assets.materialup.com/uploads/5d38e79f-3463-4f72-8716-5c62b2d9847b/0x0ss-85.jpg',\n        };\n    }\n\n    showGif = () => {\n        if (this.props.isClicked || this.props.isMatched) {\n            return this.props.gifImage;\n        }\n        else {\n            return this.state.gifCoverImg;\n        }\n    }\n\n    isMatched = () => {\n        if (this.props.isMatched) {\n            return 'success';\n        }\n        if (this.props.isClicked) {\n            return 'info';\n        }\n        else {\n            return 'light';\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                    <div className={`card bg-${this.isMatched()} text-center text-white revealed-card bg-${this.isMatched()} border-${this.isMatched()}`} style={{ width: '300px', height: '125px' }} onClick={(e) => this.state.checkForMatch(e.target.dataset.id)} data-id={this.props.dataId}>\n                        <img className='card-img' src={this.showGif()} alt={this.props.gifTitle} style={{ width: '100%', height: '90px' }} data-id={this.props.dataId}></img>\n                        <p className={`card-title bg-${this.isMatched()} text-muted`} data-id={this.props.dataId}>{this.props.gifTitle}</p>\n                    </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default GifCard;","import React, { Component, Fragment } from 'react';\nimport GameBoard from '../gameBoard';\nimport CardDeck from '../cardDeck';\nimport GifCard from '../gifcard';\nimport './masthead.css';\n\nclass Masthead extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            mastheadInitialState: props,\n            gifSearchField: '',\n            gifOriginalArr: [],\n            gifDuplicateArr: [],\n            gifSearchResults: [],\n            hasSearched: false,\n            gameStart: false,\n            clickNumber: 0,\n            firstClickId: '',\n            secondClickId: '',\n            clickedGifsArr: [],\n            foundMatch: false,\n            matchedGifId: []\n        }\n    }\n\n    componentDidMount() {\n        if (this.state.foundMatch) {\n\n        }\n    }\n\n    formStateChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    submitSearch = (e) => {\n        e.preventDefault();\n        if (!this.state.hasSearched) {\n            const APIKey = 'c1BJcDvA6sWBiMUAcncBxkaoqiYADfoL';\n            const queryURL = `https://api.giphy.com/v1/gifs/search?q=${this.state.gifSearchField}&limit=15&api_key=${APIKey}`;\n\n            let component = this;\n            let resultsArr = [];\n            let tempArr = [];\n            const xhttp = new XMLHttpRequest();\n            xhttp.onreadystatechange = function () {\n                if (this.readyState === 4 && this.status === 200) {\n\n                    resultsArr = JSON.parse(this.responseText);\n                    resultsArr = resultsArr.data;\n                    console.log(resultsArr);\n                    if (resultsArr.length === 15) {\n                        tempArr = JSON.parse(this.responseText);\n                        tempArr = tempArr.data;\n                        for (let i = 0; i < tempArr.length; i++) {\n                            tempArr[i].id += '-duplicate';\n                        }\n\n                        console.log(tempArr);\n                        console.log(resultsArr);\n                        let matchedArr = resultsArr.concat(tempArr);\n                        matchedArr.sort(function (a, b) {\n                            return 0.5 - Math.random()\n                        });\n\n                        component.setState({\n                            gifSearchResults: matchedArr,\n                            gifSearchField: '',\n                            hasSearched: true,\n                            gameStart: true\n                        });\n                        console.log(component.state);\n                        window.location.assign('#reset-game');\n                    }\n                    else {\n                        component.setState({\n                            gifSearchResults: resultsArr,\n                            gifSearchField: '',\n                            hasSearched: false,\n                            gameStart: false\n                        });\n                    }\n                }\n            }\n            xhttp.open(\"GET\", queryURL, true);\n            xhttp.send();\n        }\n    }\n\n    disableSearch = () => {\n        if (this.state.gifSearchResults >= 30) {\n            if (this.state.hasSearched) {\n                return 'btn btn-outline-danger disabled';\n            }\n            else {\n                return 'btn btn-outline-danger';\n            }\n        }\n        else {\n            return 'btn btn-outline-danger';\n        }\n    }\n\n    checkForMatch = (e) => {\n        console.log(this.state.clickNumber);\n        let clickedArr = this.state.clickedGifsArr;\n\n        if (this.state.clickNumber === 0) {\n            clickedArr.push(e);\n            this.setState((state) => ({\n                firstClickId: e,\n                clickedGifsArr: clickedArr,\n                clickNumber: state.clickNumber + 1\n            }), () => console.log(this.state));\n        }\n        if (this.state.clickNumber === 1) {\n            if (clickedArr.indexOf(e) === -1) {\n                clickedArr.push(e);\n                this.setState((state) => ({\n                    secondClickId: e,\n                    clickedGifsArr: clickedArr,\n                    clickNumber: state.clickNumber + 1\n                }), () => {\n                    console.log(this.state);\n                    if (this.shortenDataId(this.state.firstClickId) === this.shortenDataId(this.state.secondClickId)) {\n                        console.log('Found a match!');\n                        let matchedArr = this.state.matchedGifId;\n                        matchedArr.push(this.state.firstClickId);\n                        matchedArr.push(this.state.secondClickId);\n                        this.setState((state) => ({\n                            foundMatch: true,\n                            matchedGifId: matchedArr,\n                            clickNumber: state.clickNumber - 2,\n                            clickedGifsArr: []\n                        }), () => {\n                            console.log(this.state);\n                        });\n                    }\n                    else {\n                        this.setState((state) => ({\n                            clickNumber: state.clickNumber - 2,\n                            firstClickId: '',\n                            secondClickId: '',\n                            foundMatch: false,\n                            clickedGifsArr: []\n                        }), () => {\n                            console.log(this.state);\n                        });\n                    }\n                });\n            }\n        }\n    }\n\n    checkMatchedGifs = (gifId) => {\n        let matchedArr = this.state.matchedGifId;\n        let dataId = gifId;\n\n        if (matchedArr.indexOf(dataId) !== -1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    checkForClicked = (gifId) => {\n        let clickedArr = this.state.clickedGifsArr;\n        let dataId = gifId;\n\n        if (clickedArr.indexOf(dataId) !== -1) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    shortenDataId = (gifId) => {\n        const updatedId = gifId.replace('-duplicate', '');\n        return updatedId;\n    }\n\n    resetGame = () => {\n        document.getElementById('game-board').innerHTML = '';\n        window.location.assign('/clicky-game/');\n    }\n\n    render() {\n        if (this.state.gifSearchResults.length >= 30) {\n            return (\n                <Fragment>\n                    <img src='https://www.mimeo.com/wp-content/uploads/2016/10/Giphy.png' alt='Giphy Logo' id='heroImg'></img>\n                    <p className='lead text-light text-center'>Concentration Game</p>\n                    {this.state.gifSearchResults.length === 30 ? (\n                        <div className='jumbotron jumbotron-fluid bg-dark'>\n                            <div className='container'>\n                                <form>\n                                    <div className='form-group'>\n                                        <label htmlFor='gifSearch' className='text-light'>Search for Gif</label>\n                                        <div className='input-group mb-2 mr-sm-2'>\n                                            <input type='text' name='gifSearchField' className='form-control' id='gifSearch' placeholder='Search for a Gif' value={this.state.gifSearchField} onChange={this.formStateChange}></input>\n                                            <div className='input-group-append'>\n                                                <button type='submit' className={this.disableSearch()} id='submitGif' onClick={this.submitSearch}>Search</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    ) : <div></div>}\n                    <GameBoard>\n                        {this.state.matchedGifId.length === 30 ? <h1 className='text-center text-light game-text'>You Win!</h1> : <h1 className='text-center text-light game-text'>Match All The Gifs to Win!</h1>}\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index <= 5) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={gifCard.id} isMatched={this.checkMatchedGifs(gifCard.id)} isClicked={this.checkForClicked(gifCard.id)} checkForMatch={(e) => this.checkForMatch(e)} />\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-1-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index > 5 && index <= 11) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={gifCard.id} isMatched={this.checkMatchedGifs(gifCard.id)} isClicked={this.checkForClicked(gifCard.id)} checkForMatch={(e) => this.checkForMatch(e)} />\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-2-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index > 11 && index <= 17) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={gifCard.id} isMatched={this.checkMatchedGifs(gifCard.id)} isClicked={this.checkForClicked(gifCard.id)} checkForMatch={(e) => this.checkForMatch(e)} />\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-3-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index > 17 && index <= 23) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={gifCard.id} isMatched={this.checkMatchedGifs(gifCard.id)} isClicked={this.checkForClicked(gifCard.id)} checkForMatch={(e) => this.checkForMatch(e)} />\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-4-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <CardDeck>\n                            {this.state.gifSearchResults.map((gifCard, index) => {\n                                if (index > 23 && index <= 29) {\n                                    return <GifCard key={`${gifCard.id}`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} dataId={gifCard.id} isMatched={this.checkMatchedGifs(gifCard.id)} isClicked={this.checkForClicked(gifCard.id)} checkForMatch={(e) => this.checkForMatch(e)} />\n                                }\n                                else {\n                                    return (\n                                        <div key={`card-row-5-${index}`}></div>\n                                    )\n                                }\n                            })}\n                        </CardDeck>\n                        <button type='submit' className='btn btn-danger' id='reset-game' onClick={(e) => this.resetGame(e)}>Reset Game</button>\n                    </GameBoard>\n                </Fragment>\n            )\n        }\n        else if ((this.state.gifSearchResults.length > 2) && (this.state.gifSearchResults.length < 30)) {\n            return (\n                <Fragment>\n                    <img src='https://www.mimeo.com/wp-content/uploads/2016/10/Giphy.png' alt='Giphy Logo' id='heroImg'></img>\n                    <p className='lead text-light text-center'>Concentration Game</p>\n                    <div className='jumbotron jumbotron-fluid bg-dark'>\n                        <div className='container'>\n                            <form>\n                                <div className='form-group'>\n                                    <label htmlFor='gifSearch' className='text-light'>Search for Gif</label>\n                                    <div className='input-group mb-2 mr-sm-2'>\n                                        <input type='text' name='gifSearchField' className='form-control' id='gifSearch' placeholder='Search for a Gif' value={this.state.gifSearchField} onChange={this.formStateChange}></input>\n                                        <div className='input-group-append'>\n                                            <button type='submit' className={this.disableSearch()} id='submitGif' onClick={this.submitSearch}>Search</button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                    <GameBoard>\n                        <h2 className='text-light'>Not Enough Gifs to fill the board.  Try Searching again!</h2>\n                    </GameBoard>\n                </Fragment>\n            )\n        }\n        else {\n            return (\n                <Fragment>\n                    <img src='https://www.mimeo.com/wp-content/uploads/2016/10/Giphy.png' alt='Giphy Logo' id='heroImg'></img>\n                    <p className='lead text-light text-center'>Concentration Game</p>\n                    {this.state.matchedGifId.length === 0 ? (\n                        <div className='jumbotron jumbotron-fluid bg-dark'>\n                            <div className='container'>\n                                <form>\n                                    <div className='form-group'>\n                                        <label htmlFor='gifSearch' className='text-light'>Search for Gif</label>\n                                        <div className='input-group mb-2 mr-sm-2'>\n                                            <input type='text' name='gifSearchField' className='form-control' id='gifSearch' placeholder='Search for a Gif' value={this.state.gifSearchField} onChange={this.formStateChange}></input>\n                                            <div className='input-group-append'>\n                                                <button type='submit' className={this.disableSearch()} id='submitGif' onClick={this.submitSearch}>Search</button>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </form>\n                            </div>\n                        </div>\n                    ) : <div></div>}\n                    <GameBoard>\n                        <h2 className='text-light' id='empty-text'>Search for Gifs to Start</h2>\n                    </GameBoard>\n                </Fragment>\n            )\n        }\n\n    }\n}\n\nexport default Masthead;","import React, { Component, Fragment } from 'react';\n// import Navbar from './components/navbar';\nimport Masthead from './components/masthead';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        {/* <Navbar /> */}\n        <Masthead />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}