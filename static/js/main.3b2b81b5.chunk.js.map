{"version":3,"sources":["components/gameBoard/GameBoard.js","components/cardDeck/CardDeck.js","components/gifcard/GifCard.js","components/masthead/Masthead.js","App.js","serviceWorker.js","index.js"],"names":["GameBoard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","react","className","id","children","Component","CardDeck","GifCard","handleClick","e","preventDefault","isClicked","gifId","numberInSet","setState","key","style","width","height","src","gifImage","alt","gifTitle","Masthead","formStateChange","defineProperty","target","name","value","submitSearch","hasSearched","queryURL","concat","gifSearchField","component","assertThisInitialized","xhttp","XMLHttpRequest","onreadystatechange","readyState","status","tempArr","resultsArr","JSON","parse","responseText","data","duplicatedArr","sort","b","Math","random","gifSearchResults","console","log","open","send","disableSearch","mastheadInitialState","htmlFor","type","placeholder","onChange","onClick","gameBoard_GameBoard","cardDeck_CardDeck","map","gifCard","index","gifcard_GifCard","images","fixed_height","url","App","masthead_Masthead","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b2b81b5.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport './gameBoard.css';\n\nclass GameBoard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <div className='container' id='game-board'>\n                    {this.props.children}\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default GameBoard;","import React, { Component, Fragment } from 'react';\nimport './cardDeck.css';\n\nclass CardDeck extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {};\n    };\n\n    render() {\n        return (\n            <Fragment>\n                <div className='container'>\n                    <div className='card-deck'>\n                        {this.props.children}\n                    </div>\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nexport default CardDeck;","import React, { Component, Fragment } from 'react';\nimport './gifcard.css';\n\nclass GifCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isClicked: false,\n            gifId: '',\n            numberInSet: ''\n\n        };\n    }\n\n    componentDidMount() {\n        this.setState({\n            isClicked: false,\n            gifId: this.props.gifId,\n            numberInSet: ''\n        })\n    }\n\n    handleClick = (e) => {\n        e.preventDefault();\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <button key={this.props.gifId} className='card bg-dark text-center text-white' style={{ width: '300px', height: '125px' }}>\n                    <img className='card-img' src={this.props.gifImage} alt={this.props.gifTitle} style={{ width: '100%', height: '90px' }}></img>\n                    <p className='card-title text-muted'>{this.props.gifTitle}</p>\n                </button>\n            </Fragment>\n        )\n    }\n}\n\nexport default GifCard;","import React, { Component, Fragment } from 'react';\nimport GameBoard from '../gameBoard';\nimport CardDeck from '../cardDeck';\nimport GifCard from '../gifcard';\nimport './masthead.css';\n\nclass Masthead extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            mastheadInitialState: props,\n            gifSearchField: '',\n            gifSearchResults: [],\n            hasSearched: false\n        }\n    }\n\n    componentDidMount() {\n\n    }\n\n    formStateChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        });\n    }\n\n    submitSearch = (e) => {\n        e.preventDefault();\n        if (!this.state.hasSearched) {\n            const APIKey = 'c1BJcDvA6sWBiMUAcncBxkaoqiYADfoL';\n            const queryURL = `https://api.giphy.com/v1/gifs/search?q=${this.state.gifSearchField}&limit=15&api_key=${APIKey}`;\n            let component = this;\n    \n            const xhttp = new XMLHttpRequest();\n            xhttp.onreadystatechange = function () {\n                if (this.readyState === 4 && this.status === 200) {\n                    let resultsArr = [];\n                    let tempArr = [];\n                    resultsArr = JSON.parse(this.responseText);\n                    resultsArr = resultsArr.data;\n                    tempArr = resultsArr;\n                    let duplicatedArr = resultsArr.concat(tempArr);\n                    duplicatedArr.sort(function(a, b) {\n                        return 0.5 - Math.random()\n                    });\n    \n                    component.setState({\n                        gifSearchResults: duplicatedArr,\n                        gifSearchField: '',\n                        hasSearched: true\n                    });\n                    console.log(component.state);\n                }\n            }\n            xhttp.open(\"GET\", queryURL, true);\n            xhttp.send();\n        }\n    }\n\n    disableSearch = () => {\n        if (this.state.hasSearched) {\n            return 'btn btn-outline-danger disabled';\n        }\n        else {\n            return 'btn btn-outline-danger';\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className='jumbotron jumbotron-fluid bg-dark'>\n                    <div className='container'>\n                        <form>\n                            <div className='form-group'>\n                                <label htmlFor='gifSearch' className='text-light'>Search for Gif</label>\n                                <div className='input-group mb-2 mr-sm-2'>\n                                    <input type='text' name='gifSearchField' className='form-control' id='gifSearch' placeholder='Search for a Gif' value={this.state.gifSearchField} onChange={this.formStateChange}></input>\n                                    <div className='input-group-append'>\n                                        <button type='submit' className={this.disableSearch()} id='submitGif' onClick={this.submitSearch}>Search</button>\n                                    </div>\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n                <GameBoard>\n                    <CardDeck>\n                        {this.state.gifSearchResults.map((gifCard, index) => {\n                            if (index <= 5) {\n                                return <GifCard key={`${gifCard.id}-1`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} />\n                            }\n                        })}\n                    </CardDeck>\n                    <CardDeck>\n                        {this.state.gifSearchResults.map((gifCard, index) => {\n                            if (index > 5 && index <= 11) {\n                                return <GifCard key={`${gifCard.id}-1`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} />\n                            }\n                        })}\n                    </CardDeck>\n                    <CardDeck>\n                        {this.state.gifSearchResults.map((gifCard, index) => {\n                            if (index > 11 && index <= 17) {\n                                return <GifCard key={`${gifCard.id}-1`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} />\n                            }\n                        })}\n                    </CardDeck>\n                    <CardDeck>\n                        {this.state.gifSearchResults.map((gifCard, index) => {\n                            if (index > 17 && index <= 23) {\n                                return <GifCard key={`${gifCard.id}-1`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} />\n                            }\n                        })}\n                    </CardDeck>\n                    <CardDeck>\n                        {this.state.gifSearchResults.map((gifCard, index) => {\n                            if (index > 23 && index <= 29) {\n                                return <GifCard key={`${gifCard.id}-1`} gifImage={gifCard.images.fixed_height.url} gifTitle={index + 1} />\n                            }\n                        })}\n                    </CardDeck>\n                </GameBoard>\n            </Fragment>\n        )\n    }\n}\n\nexport default Masthead;","import React, { Component, Fragment } from 'react';\n// import Navbar from './components/navbar';\nimport Masthead from './components/masthead';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        {/* <Navbar /> */}\n        <Masthead />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}